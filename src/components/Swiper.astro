---
// Copyright (c) Pascal Brand
// MIT License

import 'swiper/css/bundle'

import type { AstroSwiperType } from '../index'

type Props = AstroSwiperType


const {
  options={},
  class: className = '',
  uniqueClass = 'astro-swiper-' + Math.random().toString(36).slice(2, 11),
  linkToThumbUniqueClass = '',
  ...props
} = Astro.props;

---

<!-- Slider main container -->
<astro-swiper
  class={`swiper ${uniqueClass} ${className}`}
  {...props}
  data-options={JSON.stringify(options)}
  data-linktothumbuniqueclass={linkToThumbUniqueClass}
  data-uniqueclass={uniqueClass}
  >
    <slot/>
</astro-swiper>


<script>
  import Swiper from 'swiper/bundle'
  import type { SwiperOptions } from 'swiper/types';

  /** contains the swiper json object once created, for each uniqueClass */
  const _useSwiper: { [uniqueClass: string] : Swiper; } = {};

  /** contains the option used when creating the swiper object for each uniqueClass */
  const _useOptions: { [uniqueClass: string] : SwiperOptions; } = {};

  /** contains all the uniqueClass that have their swiper object delayed because the
   * related thumbnail swiper is not created yet
   * For each uniqueClass, is equal to the thumbnail slider uniqueClass
   */
  const _useDelaySwiper: { [uniqueClass: string] : string; } = {};

  class AstroSwiper extends HTMLElement {
    /** pointer to the swiper structure that was created using "new",
     *  even when not initialized */
    astroSwiper: Swiper | undefined

    constructor() {
      super();
      this.astroSwiper = undefined

      // Read the message from the data attribute.
      const options = JSON.parse(this.dataset.options || '{}')
      const uniqueClass = this.dataset.uniqueclass || ''   // to have more than 1 swiper in a single page
      const linkToThumbUniqueClass = this.dataset.linktothumbuniqueclass || ''

      if (linkToThumbUniqueClass === '') {
        // no thumbnail link - the swiper can be created immediatly
        const swiper = new Swiper(`.${uniqueClass}`, options)
        _useSwiper[uniqueClass] = swiper
        this.astroSwiper = swiper
      } else {
        // a thumbnail link is provided
        // if the thumbnail swiper is already created, the main slider can be created also
        // otherwise, it will be added in the delayed swiper list
        if (_useSwiper[linkToThumbUniqueClass] !== undefined) {
          options.thumbs = { swiper: _useSwiper[linkToThumbUniqueClass], ...options.thumbs }
          const swiper = new Swiper(`.${uniqueClass}`, options)
          _useSwiper[uniqueClass] = swiper
          this.astroSwiper = swiper
        } else {
          // cannot create the swiper as the thumbnail swiper not created yet
          // will be done later
          _useDelaySwiper[uniqueClass] = linkToThumbUniqueClass
        }
      }

      _useOptions[uniqueClass] = options

      // look if any delayed swiper can be created, that is its related thumbnail swiper is now created
      Object.keys(_useDelaySwiper).forEach(delayedClass => {
        const delayedThumbClass = _useDelaySwiper[delayedClass]
        if (_useSwiper[delayedThumbClass] !== undefined) {
          const delayedOptions = _useOptions[delayedClass]
          delayedOptions.thumbs = { swiper: _useSwiper[delayedThumbClass], ...delayedOptions.thumbs }
          const swiper = new Swiper(`.${delayedClass}`, delayedOptions)
          _useSwiper[delayedClass] = swiper;
          (document.querySelector(`.${delayedClass}`) as AstroSwiper).astroSwiper = swiper
          _useOptions[delayedClass] = delayedOptions
          delete _useDelaySwiper[delayedClass]
        }
      })
    }
  }

  customElements.define('astro-swiper', AstroSwiper);
</script>
