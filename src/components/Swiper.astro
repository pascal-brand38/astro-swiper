---
// Copyright (c) Pascal Brand
// MIT License

import 'swiper/css/bundle'

import type { AstroSwiperType } from '../index'

type Props = AstroSwiperType


const {
  options={},
  class: className = '',
  uniqueClass = 'astro-swiper-' + Math.random().toString(36).slice(2, 11),
  linkToThumbUniqueClass = '',
  ...props
} = Astro.props;

---

<!-- Slider main container -->
<astro-swiper
  class={`swiper ${uniqueClass} ${className}`}
  {...props}
  data-options={JSON.stringify(options)}
  data-linktothumbuniqueclass={linkToThumbUniqueClass}
  data-uniqueclass={uniqueClass}
  >
    <slot/>
</astro-swiper>


<script>
  import Swiper from 'swiper/bundle'
  import { useSwiper, useOptions, useDelaySwiper } from '../index'

  class AstroSwiper extends HTMLElement {
    constructor() {
      super();

      // Read the message from the data attribute.
      const options = JSON.parse(this.dataset.options || '{}')
      const uniqueClass = this.dataset.uniqueclass || ''   // to have more than 1 swiper in a single page
      const linkToThumbUniqueClass = this.dataset.linktothumbuniqueclass || ''
      // if (thumbOf !== '') {
      //   options.thumbs = { swiper: useSwiper[thumbOf], ...options.thumbs }
      //   console.log(options.thumbs)
      //   console.log('Thumb is set to ')
      //   console.log(useSwiper[thumbOf])
      // }

      if (linkToThumbUniqueClass === '') {
        const swiper = new Swiper(`.${uniqueClass}`, options)
        useSwiper[uniqueClass] = swiper
      } else {
        if (useSwiper[linkToThumbUniqueClass] !== undefined) {
          options.thumbs = { swiper: useSwiper[linkToThumbUniqueClass], ...options.thumbs }
          const swiper = new Swiper(`.${uniqueClass}`, options)
          useSwiper[uniqueClass] = swiper
        } else {
          // cannot create the swiper as the thumbnail swiper not created yet
          // will be done later
          useDelaySwiper[uniqueClass] = linkToThumbUniqueClass
        }
      }

      useOptions[uniqueClass] = options

      // look if any delay swiper can be created
      Object.keys(useDelaySwiper).forEach(delayedClass => {
        const delayedThumbClass = useDelaySwiper[delayedClass]
        if (useSwiper[delayedThumbClass] !== undefined) {
          const delayedOptions = useOptions[delayedClass]
          delayedOptions.thumbs = { swiper: useSwiper[delayedThumbClass], ...delayedOptions.thumbs }
          const swiper = new Swiper(`.${delayedClass}`, delayedOptions)
          useSwiper[delayedClass] = swiper
          useOptions[delayedClass] = delayedOptions
          delete useDelaySwiper[delayedClass]
        }
      })
    }
  }

  customElements.define('astro-swiper', AstroSwiper);
</script>
